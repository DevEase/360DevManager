#include "MainWindow.h"
#include "ui_mainwindow.h"

using namespace std;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent), ui(new Ui::MainWindow), moduleWindowIsOpen(false), propertiesWindowIsOpen(false), fileWindowIsOpen(false)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_actionConnect_triggered()
{
    // get the console's ip address from the user
    QString ip = QInputDialog::getText(this, "Console IP Address", "IP Address:", QLineEdit::Normal, "169.254.66.42");

    // make sure it's a valid ip address
    QRegExp exp("\\d+\\.\\d+\\.\\d+\\.\\d+");
    if (ip == "")
    {
        return;
    }
    else if (!exp.exactMatch(ip))
    {
        QMessageBox::warning(this, "Invalid IP", "The IP address entered is not valid.");
        return;
    }


    // if it's valid, then try and connect to the console
    console = unique_ptr<DevConsole>(new DevConsole(ip.toStdString()));
    if (!console->OpenConnection())
    {
        QMessageBox::warning(this, "Error", "Could not establish a connection with the console " + ip);
        return;
    }

    // enable all of the controls
    ui->actionConnect->setEnabled(false);
    ui->actionDisconnect->setEnabled(true);
    ui->actionShow_Modules->setEnabled(true);
    ui->actionShow_Properties->setEnabled(true);
    ui->actionShow_File_Explorer->setEnabled(true);
    ui->menuReboot->setEnabled(true);

    createPropertiesWindow();
    createFileWindow();
}

void MainWindow::on_actionShow_Modules_triggered()
{
    if (moduleWindowIsOpen)
    {
        // this will "close" it
        if (moduleWindow != nullptr)
        {
            delete moduleWindow;
            moduleWindow = nullptr;
        }

        moduleWindowIsOpen = false;
        return;
    }

    createModulesWindow();
}

void MainWindow::on_actionLoadedModules_close(bool visible)
{
    if (!visible)
    {
        ui->actionShow_Modules->setChecked(false);
        moduleWindowIsOpen = false;
    }
}

void MainWindow::on_actionTo_Current_Title_triggered()
{
    console->RebootToCurrentTitle();
}

void MainWindow::on_actionTo_XShell_triggered()
{
    console->RebootToXShell();
}

void MainWindow::on_actionCold_triggered()
{
    console->ColdReboot();
}

void MainWindow::createPropertiesWindow()
{
    // this code is usually generated by Qt, but I need to be able to
    // create and delete this when I want, so i need to do this
    propertiesWindow = new QDockWidget(this);
    QWidget *dockWidgetContents = new QWidget();

    QVBoxLayout *verticalLayout_3 = new QVBoxLayout(dockWidgetContents);
    verticalLayout_3->setSpacing(6);
    verticalLayout_3->setContentsMargins(11, 11, 11, 11);

    QHBoxLayout *horizontalLayout = new QHBoxLayout();
    horizontalLayout->setSpacing(6);

    QVBoxLayout *verticalLayout_2 = new QVBoxLayout();
    verticalLayout_2->setSpacing(6);

    QLabel *label = new QLabel(dockWidgetContents);
    verticalLayout_2->addWidget(label);

    QLabel *label_2 = new QLabel(dockWidgetContents);
    label_2->setObjectName(QStringLiteral("label_2"));
    verticalLayout_2->addWidget(label_2);

    QLabel *label_3 = new QLabel(dockWidgetContents);
    label_3->setObjectName(QStringLiteral("label_3"));
    verticalLayout_2->addWidget(label_3);

    QLabel *label_4 = new QLabel(dockWidgetContents);
    label_4->setObjectName(QStringLiteral("label_4"));
    verticalLayout_2->addWidget(label_4);

    QLabel *label_5 = new QLabel(dockWidgetContents);
    label_5->setObjectName(QStringLiteral("label_5"));
    verticalLayout_2->addWidget(label_5);

    QLabel *label_6 = new QLabel(dockWidgetContents);
    label_6->setObjectName(QStringLiteral("label_6"));
    verticalLayout_2->addWidget(label_6);

    QLabel *label_7 = new QLabel(dockWidgetContents);
    label_7->setObjectName(QStringLiteral("label_7"));
    verticalLayout_2->addWidget(label_7);

    QLabel *label_8 = new QLabel(dockWidgetContents);
    label_8->setObjectName(QStringLiteral("label_8"));
    verticalLayout_2->addWidget(label_8);

    QLabel *label_9 = new QLabel(dockWidgetContents);
    label_9->setObjectName(QStringLiteral("label_9"));
    verticalLayout_2->addWidget(label_9);

    QLabel *label_10 = new QLabel(dockWidgetContents);
    label_10->setObjectName(QStringLiteral("label_10"));
    verticalLayout_2->addWidget(label_10);

    QLabel *label_11 = new QLabel(dockWidgetContents);
    label_11->setObjectName(QStringLiteral("label_11"));
    verticalLayout_2->addWidget(label_11);

    horizontalLayout->addLayout(verticalLayout_2);

    QVBoxLayout *verticalLayout = new QVBoxLayout();
    verticalLayout->setSpacing(6);
    verticalLayout->setObjectName(QStringLiteral("verticalLayout"));
    QLabel *lblDebugName = new QLabel(dockWidgetContents);
    lblDebugName->setObjectName(QStringLiteral("lblDebugName"));
    lblDebugName->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblDebugName);

    QLabel *lblHddEnabled = new QLabel(dockWidgetContents);
    lblHddEnabled->setObjectName(QStringLiteral("lblHddEnabled"));
    lblHddEnabled->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblHddEnabled);

    QLabel *lblDebugMemorySize = new QLabel(dockWidgetContents);
    lblDebugMemorySize->setObjectName(QStringLiteral("lblDebugMemorySize"));
    lblDebugMemorySize->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblDebugMemorySize);

    QLabel *lblType = new QLabel(dockWidgetContents);
    lblType->setObjectName(QStringLiteral("lblType"));
    lblType->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblType);

    QLabel *lblFeatures = new QLabel(dockWidgetContents);
    lblFeatures->setObjectName(QStringLiteral("lblFeatures"));
    lblFeatures->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblFeatures);

    QLabel *lblPlatform = new QLabel(dockWidgetContents);
    lblPlatform->setObjectName(QStringLiteral("lblPlatform"));
    lblPlatform->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblPlatform);

    QLabel *lblMotherboard = new QLabel(dockWidgetContents);
    lblMotherboard->setObjectName(QStringLiteral("lblMotherboard"));
    lblMotherboard->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblMotherboard);

    QLabel *lblBaseKrnlVersion = new QLabel(dockWidgetContents);
    lblBaseKrnlVersion->setObjectName(QStringLiteral("lblBaseKrnlVersion"));
    lblBaseKrnlVersion->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblBaseKrnlVersion);

    QLabel *lblKrnlVersion = new QLabel(dockWidgetContents);
    lblKrnlVersion->setObjectName(QStringLiteral("lblKrnlVersion"));
    lblKrnlVersion->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblKrnlVersion);

    QLabel *lblRecoveryVersion = new QLabel(dockWidgetContents);
    lblRecoveryVersion->setObjectName(QStringLiteral("lblRecoveryVersion"));
    lblRecoveryVersion->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblRecoveryVersion);

    QLabel *lblActiveTitle = new QLabel(dockWidgetContents);
    lblActiveTitle->setObjectName(QStringLiteral("lblActiveTitle"));
    lblActiveTitle->setAlignment(Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter);

    verticalLayout->addWidget(lblActiveTitle);
    horizontalLayout->addLayout(verticalLayout);
    verticalLayout_3->addLayout(horizontalLayout);

    label->setText(QApplication::translate("MainWindow", "Debug Name:", 0));
    label_2->setText(QApplication::translate("MainWindow", "HDD Enabled: ", 0));
    label_3->setText(QApplication::translate("MainWindow", "Debug Memory Size:", 0));
    label_4->setText(QApplication::translate("MainWindow", "Type:", 0));
    label_5->setText(QApplication::translate("MainWindow", "Features:", 0));
    label_6->setText(QApplication::translate("MainWindow", "Platform:", 0));
    label_7->setText(QApplication::translate("MainWindow", "Motherboard", 0));
    label_8->setText(QApplication::translate("MainWindow", "Base Kernel Version:", 0));
    label_9->setText(QApplication::translate("MainWindow", "Kernel Version:", 0));
    label_10->setText(QApplication::translate("MainWindow", "Recovery Version:", 0));
    label_11->setText(QApplication::translate("MainWindow", "Active Title:", 0));
    lblDebugName->setText(QApplication::translate("MainWindow", "...", 0));
    lblHddEnabled->setText(QApplication::translate("MainWindow", "...", 0));
    lblDebugMemorySize->setText(QApplication::translate("MainWindow", "...", 0));
    lblType->setText(QApplication::translate("MainWindow", "...", 0));
    lblFeatures->setText(QApplication::translate("MainWindow", "...", 0));
    lblPlatform->setText(QApplication::translate("MainWindow", "...", 0));
    lblMotherboard->setText(QApplication::translate("MainWindow", "...", 0));
    lblBaseKrnlVersion->setText(QApplication::translate("MainWindow", "...", 0));
    lblKrnlVersion->setText(QApplication::translate("MainWindow", "...", 0));
    lblRecoveryVersion->setText(QApplication::translate("MainWindow", "...", 0));
    lblActiveTitle->setText(QApplication::translate("MainWindow", "...", 0));

    propertiesWindow->setWindowTitle(QApplication::translate("MainWindow", "Properties", 0));

    // load all of the settings into the GUI
    bool ok;
    lblDebugName->setText(qs(console->GetDebugName(ok)));
    lblActiveTitle->setText(qs(console->GetActiveTitle(ok)));
    lblHddEnabled->setText(console->IsHddEnabled(ok) ? "Yes" : "No");
    lblType->setText(qs(console->GetType(ok)));
    lblFeatures->setText(qs(console->GetFeatures(ok)));
    lblPlatform->setText(qs(console->GetPlatform(ok)));
    lblMotherboard->setText(qs(console->GetMotherboard(ok)));
    lblBaseKrnlVersion->setText(qs(console->GetBaseKernelVersion(ok)));
    lblKrnlVersion->setText(qs(console->GetKernelVersion(ok)));
    lblRecoveryVersion->setText(qs(console->GetRecoveryVersion(ok)));
    lblDebugMemorySize->setText(qhex(console->GetDebugMemorySize(ok)));

    propertiesWindowIsOpen = true;
    propertiesWindow->setWidget(dockWidgetContents);
    addDockWidget(static_cast<Qt::DockWidgetArea>(1), propertiesWindow);
}

void MainWindow::createFileWindow()
{
    // this code will create the UI
    fileWindow = new QDockWidget(this);
    QWidget *dockWidgetContents = new QWidget();
    fileWindow->setWindowTitle(QApplication::translate("MainWindow", "File Explorer", 0));

    QVBoxLayout *verticalLayout_2 = new QVBoxLayout(dockWidgetContents);
    verticalLayout_2->setSpacing(6);
    verticalLayout_2->setContentsMargins(11, 11, 11, 11);

    QVBoxLayout *verticalLayout = new QVBoxLayout();
    verticalLayout->setSpacing(6);

    QHBoxLayout *horizontalLayout = new QHBoxLayout();
    horizontalLayout->setSpacing(6);
    horizontalLayout->setStretch(0, 9);
    horizontalLayout->setStretch(1, 2);

    QLineEdit *txtPath = new QLineEdit(dockWidgetContents);
    horizontalLayout->addWidget(txtPath);

    QLineEdit *txtSearch = new QLineEdit(dockWidgetContents);
    txtSearch->setPlaceholderText(QApplication::translate("MainWindow", "Search...", 0));
    txtSearch->setMaximumWidth(200);
    horizontalLayout->addWidget(txtSearch);

    verticalLayout->addLayout(horizontalLayout);

    QTreeWidget *lstFiles = new QTreeWidget(dockWidgetContents);
    lstFiles->setIconSize(QSize(32, 32));
    lstFiles->setColumnWidth(0, 200);

    QStringList headerLabels;
    headerLabels << "Name" << "Size";
    lstFiles->setHeaderLabels(headerLabels);

    verticalLayout->addWidget(lstFiles);
    verticalLayout_2->addLayout(verticalLayout);

    fileWindowIsOpen = true;
    fileWindow->setWidget(dockWidgetContents);
    addDockWidget(static_cast<Qt::DockWidgetArea>(2), fileWindow);


    // now let's load the volumes
    bool ok;
    for (Drive d : console->GetDrives(ok, true))
    {
        QTreeWidgetItem *item = new QTreeWidgetItem(lstFiles);
        item->setIcon(0, QIcon(":/images/images/volume.png"));
        item->setText(0, qs(d.name));
    }

    // when a dirent is clicked on, we need to have something happen
    connect(fileWindow, SIGNAL(visibilityChanged(bool)),this, SLOT(on_actionShow_File_Explorer_close(bool)));
}

void MainWindow::on_actionShow_Properties_triggered()
{
    if (propertiesWindowIsOpen)
    {
        // this will "close" it
        if (propertiesWindow != nullptr)
        {
            delete propertiesWindow;
            propertiesWindow = nullptr;
        }

        propertiesWindow = nullptr;
        propertiesWindowIsOpen = false;
        return;
    }

    createPropertiesWindow();
}

void MainWindow::on_actionProperties_close(bool visible)
{
    if (!visible)
    {
        ui->actionShow_Properties->setChecked(false);
        propertiesWindowIsOpen = false;
    }
}

void MainWindow::createModulesWindow()
{
    moduleWindow = new QDockWidget("Modules", this);
    QTreeWidget *moduleTree = new QTreeWidget(moduleWindow);
    moduleTree->setAttribute(Qt::WA_DeleteOnClose, true);

    QStringList headerLabels;
    headerLabels << "Name" << "Base Address" << "Size" << "Data Address" << "Data Size" << "Thread ID";
    moduleTree->setHeaderLabels(headerLabels);

    bool ok;
    for (const Module &m : console->GetLoadedModules(ok, true))
    {
        QTreeWidgetItem *moduleItem = new QTreeWidgetItem(moduleTree);
        moduleItem->setText(0, qs(m.name));
        moduleItem->setText(1, qhex(m.baseAddress));
        moduleItem->setText(2, qhex(m.size));
        moduleItem->setText(3, qhex(m.dataAddress));
        moduleItem->setText(4, qhex(m.dataSize));
        moduleItem->setText(5, qhex(m.threadId));

        // load all of the module sections into the GUI
        for (const ModuleSection &sect : m.sections)
        {
            QTreeWidgetItem *sectionItem = new QTreeWidgetItem(moduleItem);
            sectionItem->setText(0, qs(sect.name));
            sectionItem->setText(1, qhex(sect.baseAddress));
            sectionItem->setText(2, qhex(sect.size));
        }
    }

    moduleWindow->setWidget(moduleTree);
    addDockWidget(Qt::BottomDockWidgetArea, moduleWindow);
    moduleWindowIsOpen = true;

    connect(moduleWindow, SIGNAL(visibilityChanged(bool)), this, SLOT(on_actionLoadedModules_close(bool)));
}

void MainWindow::on_actionShow_File_Explorer_triggered()
{
    if (fileWindowIsOpen)
    {
        // this will "close" it
        if (fileWindow != nullptr)
        {
            delete fileWindow;
            fileWindow = nullptr;
        }

        fileWindow = nullptr;
        fileWindowIsOpen = false;
        return;
    }

    createFileWindow();
}

void MainWindow::on_actionShow_File_Explorer_close(bool visible)
{
    if (!visible)
    {
        ui->actionShow_File_Explorer->setChecked(false);
        fileWindowIsOpen = false;
    }
}
